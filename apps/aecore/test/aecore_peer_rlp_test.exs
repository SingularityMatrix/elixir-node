defmodule AecorePeerRLPTest do
  use ExUnit.Case

  alias Aecore.Peers.PeerConnection

  test "encode and decode RLP test based on epoch binaries" do
    # ping
    assert PeerConnection.rlp_encode(1, ping_object()) == ping_binary()
    assert PeerConnection.rlp_decode(1, ping_binary()) == ping_object()

    # get_header_by_hash
    assert PeerConnection.rlp_encode(3, get_block_and_header_by_hash_object()) ==
             get_block_and_header_by_hash_binary()

    assert PeerConnection.rlp_decode(3, get_block_and_header_by_hash_binary()) ==
             get_block_and_header_by_hash_object()

    # get_n_successors
    assert PeerConnection.rlp_encode(5, get_n_successors_object()) == get_n_successors_binary()

    assert PeerConnection.rlp_decode(5, get_n_successors_binary()) == get_n_successors_object()

    # get_block
    assert PeerConnection.rlp_encode(7, get_block_and_header_by_hash_object()) ==
             get_block_and_header_by_hash_binary()

    assert PeerConnection.rlp_decode(7, get_block_and_header_by_hash_binary()) ==
             get_block_and_header_by_hash_object()

    # get_header_by_height
    assert PeerConnection.rlp_encode(15, get_header_by_height_object()) ==
             get_header_by_height_binary()

    assert PeerConnection.rlp_decode(15, get_header_by_height_binary()) ==
             get_header_by_height_object()

    # header_hashes response
    assert PeerConnection.rlp_encode(100, header_hashes_response_object()) ==
             header_hashes_response_binary()

    assert PeerConnection.rlp_decode(100, header_hashes_response_binary()) ==
             header_hashes_response_object()

    # header response
    assert PeerConnection.rlp_encode(100, header_response_object()) == header_response_binary()

    assert PeerConnection.rlp_decode(100, header_response_binary()) == header_response_object()

    # block response
    assert PeerConnection.rlp_encode(100, block_response_object()) == block_response_binary()

    assert PeerConnection.rlp_decode(100, block_response_binary()) == block_response_object()

    # mempool response
    assert PeerConnection.rlp_encode(100, mempool_response_object()) == mempool_response_binary()

    assert PeerConnection.rlp_decode(100, mempool_response_binary()) == mempool_response_object()
  end

  def ping_object do
    %{
      best_hash:
        <<254, 17, 240, 34, 119, 165, 230, 98, 79, 102, 52, 13, 100, 213, 41, 139, 25, 111, 250,
          78, 94, 33, 20, 202, 237, 162, 77, 160, 205, 159, 30, 146>>,
      difficulty:
        79_029_892_420_609_677_721_306_957_927_958_300_445_348_156_665_650_565_106_839_600,
      genesis_hash:
        <<254, 17, 240, 34, 119, 165, 230, 98, 79, 102, 52, 13, 100, 213, 41, 139, 25, 111, 250,
          78, 94, 33, 20, 202, 237, 162, 77, 160, 205, 159, 30, 146>>,
      peers: [
        %{
          host: '31.13.249.70',
          port: 3015,
          pubkey:
            <<225, 20, 115, 180, 23, 84, 149, 52, 111, 153, 254, 213, 39, 210, 49, 196, 30, 21, 9,
              93, 48, 103, 84, 63, 207, 94, 95, 41, 134, 145, 215, 123>>
        }
      ],
      port: 3015,
      share: 32
    }
  end

  def ping_binary do
    <<248, 150, 1, 130, 11, 199, 32, 160, 254, 17, 240, 34, 119, 165, 230, 98, 79, 102, 52, 13,
      100, 213, 41, 139, 25, 111, 250, 78, 94, 33, 20, 202, 237, 162, 77, 160, 205, 159, 30, 146,
      154, 49, 46, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48,
      101, 43, 48, 48, 160, 254, 17, 240, 34, 119, 165, 230, 98, 79, 102, 52, 13, 100, 213, 41,
      139, 25, 111, 250, 78, 94, 33, 20, 202, 237, 162, 77, 160, 205, 159, 30, 146, 243, 178, 241,
      140, 51, 49, 46, 49, 51, 46, 50, 52, 57, 46, 55, 48, 130, 11, 199, 160, 225, 20, 115, 180,
      23, 84, 149, 52, 111, 153, 254, 213, 39, 210, 49, 196, 30, 21, 9, 93, 48, 103, 84, 63, 207,
      94, 95, 41, 134, 145, 215, 123>>
  end

  def get_block_and_header_by_hash_object do
    %{
      hash:
        <<138, 11, 233, 125, 181, 144, 59, 74, 102, 52, 231, 228, 25, 248, 145, 174, 249, 194,
          130, 12, 231, 24, 149, 234, 95, 143, 94, 11, 124, 6, 118, 78>>
    }
  end

  def get_block_and_header_by_hash_binary do
    <<226, 1, 160, 138, 11, 233, 125, 181, 144, 59, 74, 102, 52, 231, 228, 25, 248, 145, 174, 249,
      194, 130, 12, 231, 24, 149, 234, 95, 143, 94, 11, 124, 6, 118, 78>>
  end

  def get_header_by_height_object do
    %{height: 5}
  end

  def get_header_by_height_binary do
    <<194, 1, 5>>
  end

  def get_n_successors_object do
    %{
      hash:
        <<138, 11, 233, 125, 181, 144, 59, 74, 102, 52, 231, 228, 25, 248, 145, 174, 249, 194,
          130, 12, 231, 24, 149, 234, 95, 143, 94, 11, 124, 6, 118, 78>>,
      n: 5
    }
  end

  def get_n_successors_binary do
    <<227, 1, 160, 138, 11, 233, 125, 181, 144, 59, 74, 102, 52, 231, 228, 25, 248, 145, 174, 249,
      194, 130, 12, 231, 24, 149, 234, 95, 143, 94, 11, 124, 6, 118, 78, 5>>
  end

  def header_hashes_response_object do
    %{object: %{hashes: []}, reason: nil, result: true, type: 6}
  end

  def header_hashes_response_binary do
    <<200, 1, 1, 6, 128, 131, 194, 1, 192>>
  end

  def header_response_object do
    %{
      object: %{
        header: %Aecore.Chain.Header{
          height: 3550,
          miner:
            <<40, 120, 133, 141, 90, 52, 134, 210, 169, 73, 81, 238, 182, 56, 191, 220, 31, 6, 31,
              176, 50, 226, 173, 46, 47, 155, 147, 6, 127, 197, 7, 99>>,
          nonce: 17_269_151_684_349_382_367,
          pow_evidence: [
            799_158,
            2_849_147,
            3_741_093,
            6_108_834,
            6_890_896,
            6_984_434,
            7_431_989,
            18_349_559,
            20_912_974,
            22_061_326,
            23_648_531,
            23_776_219,
            29_037_146,
            30_932_577,
            32_704_068,
            36_943_982,
            37_860_182,
            49_076_307,
            50_997_039,
            52_841_893,
            64_702_318,
            69_910_186,
            71_179_912,
            75_562_124,
            79_960_053,
            80_402_362,
            80_642_902,
            87_459_769,
            87_881_724,
            88_048_578,
            88_682_169,
            96_140_476,
            97_407_280,
            98_884_257,
            100_089_147,
            117_924_338,
            120_317_776,
            123_874_129,
            124_359_824,
            128_201_549,
            129_716_954,
            131_416_444
          ],
          prev_hash:
            <<37, 223, 213, 242, 124, 9, 142, 242, 88, 211, 248, 115, 157, 113, 122, 98, 246, 170,
              230, 118, 53, 121, 165, 110, 197, 124, 241, 198, 174, 32, 159, 79>>,
          root_hash:
            <<173, 108, 9, 118, 198, 83, 58, 111, 165, 250, 193, 143, 78, 161, 167, 138, 12, 229,
              10, 151, 10, 189, 166, 219, 61, 67, 249, 177, 223, 238, 71, 136>>,
          target: 537_108_705,
          time: 1_530_704_750_574,
          txs_hash:
            <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0>>,
          version: 15
        }
      },
      reason: nil,
      result: true,
      type: 4
    }
  end

  def header_response_binary do
    <<249, 1, 94, 1, 1, 4, 128, 185, 1, 87, 249, 1, 84, 1, 185, 1, 80, 0, 0, 0, 0, 0, 0, 0, 15, 0,
      0, 0, 0, 0, 0, 13, 222, 37, 223, 213, 242, 124, 9, 142, 242, 88, 211, 248, 115, 157, 113,
      122, 98, 246, 170, 230, 118, 53, 121, 165, 110, 197, 124, 241, 198, 174, 32, 159, 79, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      173, 108, 9, 118, 198, 83, 58, 111, 165, 250, 193, 143, 78, 161, 167, 138, 12, 229, 10, 151,
      10, 189, 166, 219, 61, 67, 249, 177, 223, 238, 71, 136, 0, 0, 0, 0, 32, 3, 160, 225, 0, 12,
      49, 182, 0, 43, 121, 123, 0, 57, 21, 165, 0, 93, 54, 162, 0, 105, 37, 144, 0, 106, 146, 242,
      0, 113, 103, 53, 1, 23, 253, 247, 1, 63, 27, 78, 1, 80, 161, 14, 1, 104, 217, 19, 1, 106,
      203, 219, 1, 187, 18, 90, 1, 215, 254, 97, 1, 243, 6, 68, 2, 51, 184, 110, 2, 65, 179, 86,
      2, 236, 216, 83, 3, 10, 39, 47, 3, 38, 77, 165, 3, 219, 71, 110, 4, 42, 190, 170, 4, 62, 30,
      136, 4, 128, 252, 140, 4, 196, 23, 245, 4, 202, 215, 186, 4, 206, 131, 86, 5, 54, 135, 185,
      5, 60, 247, 252, 5, 63, 131, 194, 5, 73, 46, 185, 5, 186, 252, 188, 5, 206, 81, 48, 5, 228,
      218, 161, 5, 247, 61, 59, 7, 7, 97, 242, 7, 43, 231, 80, 7, 98, 43, 81, 7, 105, 148, 144, 7,
      164, 51, 77, 7, 187, 82, 218, 7, 213, 65, 124, 239, 168, 89, 246, 5, 251, 206, 223, 0, 0, 1,
      100, 101, 28, 231, 238, 40, 120, 133, 141, 90, 52, 134, 210, 169, 73, 81, 238, 182, 56, 191,
      220, 31, 6, 31, 176, 50, 226, 173, 46, 47, 155, 147, 6, 127, 197, 7, 99>>
  end

  def block_response_object do
    %{
      object: %{
        block: %Aecore.Chain.Block{
          header: %Aecore.Chain.Header{
            height: 3509,
            miner:
              <<92, 103, 182, 120, 4, 143, 50, 165, 196, 206, 213, 80, 7, 234, 182, 211, 95, 15,
                53, 143, 58, 182, 114, 108, 16, 162, 25, 105, 178, 8, 172, 153>>,
            nonce: 14_291_859_953_744_331_140,
            pow_evidence: [
              3_362_637,
              7_153_803,
              10_414_170,
              14_444_607,
              18_357_961,
              18_807_415,
              19_650_256,
              21_482_823,
              22_559_774,
              26_175_204,
              26_576_568,
              44_095_360,
              50_684_982,
              51_386_280,
              55_391_132,
              59_022_583,
              61_158_947,
              62_913_582,
              65_726_940,
              65_778_737,
              66_898_150,
              70_595_358,
              73_382_886,
              74_341_516,
              75_429_983,
              76_207_159,
              83_957_956,
              87_290_657,
              95_669_053,
              98_053_825,
              99_450_518,
              105_455_041,
              113_650_970,
              113_838_318,
              114_094_017,
              122_042_481,
              123_854_517,
              125_517_514,
              125_947_002,
              127_982_323,
              128_901_413,
              130_519_615
            ],
            prev_hash:
              <<32, 57, 101, 69, 194, 214, 69, 100, 13, 227, 94, 203, 125, 194, 228, 92, 235, 137,
                136, 139, 162, 220, 84, 128, 203, 92, 193, 84, 210, 4, 174, 27>>,
            root_hash:
              <<36, 112, 12, 93, 175, 16, 45, 178, 78, 228, 176, 133, 12, 165, 253, 241, 187, 7,
                244, 24, 42, 246, 233, 87, 35, 14, 169, 253, 230, 5, 25, 193>>,
            target: 537_109_442,
            time: 1_530_690_820_021,
            txs_hash:
              <<0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0>>,
            version: 15
          },
          txs: []
        }
      },
      reason: nil,
      result: true,
      type: 11
    }
  end

  def block_response_binary do
    <<249, 1, 103, 1, 1, 11, 128, 185, 1, 96, 249, 1, 93, 1, 185, 1, 89, 249, 1, 86, 100, 15, 185,
      1, 80, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 13, 181, 32, 57, 101, 69, 194, 214, 69,
      100, 13, 227, 94, 203, 125, 194, 228, 92, 235, 137, 136, 139, 162, 220, 84, 128, 203, 92,
      193, 84, 210, 4, 174, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 112, 12, 93, 175, 16, 45, 178, 78, 228, 176, 133, 12, 165,
      253, 241, 187, 7, 244, 24, 42, 246, 233, 87, 35, 14, 169, 253, 230, 5, 25, 193, 0, 0, 0, 0,
      32, 3, 163, 194, 0, 51, 79, 77, 0, 109, 40, 139, 0, 158, 232, 90, 0, 220, 104, 63, 1, 24,
      30, 201, 1, 30, 250, 119, 1, 43, 214, 208, 1, 71, 205, 71, 1, 88, 60, 30, 1, 143, 102, 228,
      1, 149, 134, 184, 2, 160, 215, 128, 3, 5, 100, 54, 3, 16, 23, 168, 3, 77, 51, 156, 3, 132,
      156, 247, 3, 165, 54, 35, 3, 191, 252, 46, 3, 234, 233, 220, 3, 235, 180, 49, 3, 252, 200,
      230, 4, 53, 51, 30, 4, 95, 187, 230, 4, 110, 92, 140, 4, 126, 248, 95, 4, 138, 212, 55, 5,
      1, 24, 196, 5, 51, 243, 33, 5, 179, 203, 61, 5, 216, 46, 193, 5, 237, 126, 150, 6, 73, 29,
      193, 6, 198, 45, 26, 6, 201, 8, 238, 6, 204, 239, 193, 7, 70, 56, 113, 7, 97, 222, 181, 7,
      123, 62, 202, 7, 129, 204, 122, 7, 160, 218, 243, 7, 174, 225, 37, 7, 199, 146, 63, 198, 86,
      226, 232, 10, 143, 193, 132, 0, 0, 1, 100, 100, 72, 87, 181, 92, 103, 182, 120, 4, 143, 50,
      165, 196, 206, 213, 80, 7, 234, 182, 211, 95, 15, 53, 143, 58, 182, 114, 108, 16, 162, 25,
      105, 178, 8, 172, 153, 192>>
  end

  def mempool_response_object do
    %{
      object: %{
        txs: [
          %Aecore.Tx.SignedTx{
            data: %Aecore.Tx.DataTx{
              fee: 12,
              nonce: 1,
              payload: %Aecore.Account.Tx.SpendTx{
                amount: 10,
                payload: "",
                receiver:
                  <<3, 238, 153, 246, 48, 67, 139, 193, 171, 24, 113, 29, 106, 32, 18, 237, 193,
                    150, 109, 175, 94, 92, 187, 125, 212, 64, 214, 213, 55, 25, 74, 133, 154>>,
                version: 1
              },
              senders: [
                <<3, 238, 153, 246, 48, 67, 139, 193, 171, 24, 113, 29, 106, 32, 18, 237, 193,
                  150, 109, 175, 94, 92, 187, 125, 212, 64, 214, 213, 55, 25, 74, 133, 154>>
              ],
              ttl: 0,
              type: Aecore.Account.Tx.SpendTx
            },
            signatures: [
              <<48, 69, 2, 33, 0, 238, 28, 94, 28, 181, 175, 246, 145, 211, 91, 189, 59, 56, 181,
                244, 75, 55, 105, 75, 172, 21, 66, 216, 191, 192, 228, 28, 103, 90, 9, 43, 89, 2,
                32, 79, 49, 84, 183, 41, 189, 18, 156, 43, 109, 137, 127, 116, 204, 95, 51, 17,
                110, 117, 195, 157, 131, 109, 105, 1, 144, 202, 212, 58, 167, 132, 158>>
            ]
          },
          %Aecore.Tx.SignedTx{
            data: %Aecore.Tx.DataTx{
              fee: 10,
              nonce: 1,
              payload: %Aecore.Account.Tx.SpendTx{
                amount: 10,
                payload: "",
                receiver:
                  <<3, 238, 153, 246, 48, 67, 139, 193, 171, 24, 113, 29, 106, 32, 18, 237, 193,
                    150, 109, 175, 94, 92, 187, 125, 212, 64, 214, 213, 55, 25, 74, 133, 154>>,
                version: 1
              },
              senders: [
                <<3, 238, 153, 246, 48, 67, 139, 193, 171, 24, 113, 29, 106, 32, 18, 237, 193,
                  150, 109, 175, 94, 92, 187, 125, 212, 64, 214, 213, 55, 25, 74, 133, 154>>
              ],
              ttl: 0,
              type: Aecore.Account.Tx.SpendTx
            },
            signatures: [
              <<48, 69, 2, 32, 73, 174, 169, 160, 11, 222, 171, 84, 119, 202, 5, 247, 199, 184,
                73, 192, 212, 96, 191, 179, 73, 70, 71, 24, 216, 236, 189, 15, 175, 3, 157, 146,
                2, 33, 0, 128, 105, 124, 219, 7, 173, 170, 46, 7, 172, 101, 254, 150, 26, 171,
                100, 111, 39, 228, 60, 249, 193, 135, 150, 72, 102, 237, 199, 76, 21, 214, 125>>
            ]
          },
          %Aecore.Tx.SignedTx{
            data: %Aecore.Tx.DataTx{
              fee: 11,
              nonce: 1,
              payload: %Aecore.Account.Tx.SpendTx{
                amount: 10,
                payload: "",
                receiver:
                  <<3, 238, 153, 246, 48, 67, 139, 193, 171, 24, 113, 29, 106, 32, 18, 237, 193,
                    150, 109, 175, 94, 92, 187, 125, 212, 64, 214, 213, 55, 25, 74, 133, 154>>,
                version: 1
              },
              senders: [
                <<3, 238, 153, 246, 48, 67, 139, 193, 171, 24, 113, 29, 106, 32, 18, 237, 193,
                  150, 109, 175, 94, 92, 187, 125, 212, 64, 214, 213, 55, 25, 74, 133, 154>>
              ],
              ttl: 0,
              type: Aecore.Account.Tx.SpendTx
            },
            signatures: [
              <<48, 69, 2, 32, 79, 191, 59, 15, 60, 27, 214, 3, 1, 89, 191, 153, 58, 82, 77, 213,
                122, 7, 53, 230, 196, 157, 187, 88, 135, 3, 122, 22, 104, 14, 91, 119, 2, 33, 0,
                148, 195, 72, 36, 5, 53, 241, 134, 161, 45, 65, 77, 200, 138, 136, 38, 92, 225,
                249, 76, 177, 10, 67, 18, 26, 113, 202, 108, 123, 138, 246, 184>>
            ]
          }
        ]
      },
      reason: nil,
      result: true,
      type: 14
    }
  end

  def mempool_response_binary do
    <<249, 1, 241, 1, 1, 14, 128, 185, 1, 234, 249, 1, 231, 1, 249, 1, 227, 184, 159, 248, 157,
      11, 1, 248, 73, 184, 71, 48, 69, 2, 33, 0, 238, 28, 94, 28, 181, 175, 246, 145, 211, 91,
      189, 59, 56, 181, 244, 75, 55, 105, 75, 172, 21, 66, 216, 191, 192, 228, 28, 103, 90, 9, 43,
      89, 2, 32, 79, 49, 84, 183, 41, 189, 18, 156, 43, 109, 137, 127, 116, 204, 95, 51, 17, 110,
      117, 195, 157, 131, 109, 105, 1, 144, 202, 212, 58, 167, 132, 158, 184, 78, 248, 76, 12, 1,
      226, 161, 3, 238, 153, 246, 48, 67, 139, 193, 171, 24, 113, 29, 106, 32, 18, 237, 193, 150,
      109, 175, 94, 92, 187, 125, 212, 64, 214, 213, 55, 25, 74, 133, 154, 161, 3, 238, 153, 246,
      48, 67, 139, 193, 171, 24, 113, 29, 106, 32, 18, 237, 193, 150, 109, 175, 94, 92, 187, 125,
      212, 64, 214, 213, 55, 25, 74, 133, 154, 10, 12, 128, 1, 128, 184, 159, 248, 157, 11, 1,
      248, 73, 184, 71, 48, 69, 2, 32, 73, 174, 169, 160, 11, 222, 171, 84, 119, 202, 5, 247, 199,
      184, 73, 192, 212, 96, 191, 179, 73, 70, 71, 24, 216, 236, 189, 15, 175, 3, 157, 146, 2, 33,
      0, 128, 105, 124, 219, 7, 173, 170, 46, 7, 172, 101, 254, 150, 26, 171, 100, 111, 39, 228,
      60, 249, 193, 135, 150, 72, 102, 237, 199, 76, 21, 214, 125, 184, 78, 248, 76, 12, 1, 226,
      161, 3, 238, 153, 246, 48, 67, 139, 193, 171, 24, 113, 29, 106, 32, 18, 237, 193, 150, 109,
      175, 94, 92, 187, 125, 212, 64, 214, 213, 55, 25, 74, 133, 154, 161, 3, 238, 153, 246, 48,
      67, 139, 193, 171, 24, 113, 29, 106, 32, 18, 237, 193, 150, 109, 175, 94, 92, 187, 125, 212,
      64, 214, 213, 55, 25, 74, 133, 154, 10, 10, 128, 1, 128, 184, 159, 248, 157, 11, 1, 248, 73,
      184, 71, 48, 69, 2, 32, 79, 191, 59, 15, 60, 27, 214, 3, 1, 89, 191, 153, 58, 82, 77, 213,
      122, 7, 53, 230, 196, 157, 187, 88, 135, 3, 122, 22, 104, 14, 91, 119, 2, 33, 0, 148, 195,
      72, 36, 5, 53, 241, 134, 161, 45, 65, 77, 200, 138, 136, 38, 92, 225, 249, 76, 177, 10, 67,
      18, 26, 113, 202, 108, 123, 138, 246, 184, 184, 78, 248, 76, 12, 1, 226, 161, 3, 238, 153,
      246, 48, 67, 139, 193, 171, 24, 113, 29, 106, 32, 18, 237, 193, 150, 109, 175, 94, 92, 187,
      125, 212, 64, 214, 213, 55, 25, 74, 133, 154, 161, 3, 238, 153, 246, 48, 67, 139, 193, 171,
      24, 113, 29, 106, 32, 18, 237, 193, 150, 109, 175, 94, 92, 187, 125, 212, 64, 214, 213, 55,
      25, 74, 133, 154, 10, 11, 128, 1, 128>>
  end
end
